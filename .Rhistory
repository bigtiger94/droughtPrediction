}
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts));
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts));
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts));
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts));
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
sdi.thl = c(0, -1, -1.5, -2) # threhold from NOAA and GIDMaPS
thlname = c("No", "D0", "D1", "D2", "D3")
prob.rawenssri.dphase.over = data.frame()
prob.rawenssri.dphase.each = data.frame()
prob.upenssri.dphase.over = data.frame()
prob.upenssri.dphase.each = data.frame()
obs.sri.dphase = as.data.frame(matrix(0, nrow=length(temp_sri.ts), ncol=1+length(sdi.thl)))
rawensmean.sri.dphase = as.data.frame(matrix(0, nrow=length(rawens.mean.ts), ncol=1+length(sdi.thl)))
upensmean.sri.dphase =  as.data.frame(matrix(0, nrow=length(SRI3.p.ts), ncol=1+length(sdi.thl)))
for (jj in c(1:nrow(obs.sri.dphase))){
# probability of occurrence over threshold from raw ensemble
temp.prob.rawens.dphase.over = c()
temp.prob.rawens.dphase.over[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 500, abs.tol=0)$value
temp.prob.rawens.dphase.over[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[1], abs.tol=0)$value
temp.prob.rawens.dphase.over[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[2], abs.tol=0)$value
temp.prob.rawens.dphase.over[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[3], abs.tol=0)$value
temp.prob.rawens.dphase.over[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[4], abs.tol=0)$value
temp.prob.rawens.dphase.over[is.na(temp.prob.rawens.dphase.over)] = 0
prob.rawenssri.dphase.over = rbind(prob.rawenssri.dphase.over, temp.prob.rawens.dphase.over)
# probability of occurrence for each phase from raw ensemble
temp.prob.rawens.dphase.each = c()
temp.prob.rawens.dphase.each[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 500, abs.tol=0)$value
temp.prob.rawens.dphase.each[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=0)$value
temp.prob.rawens.dphase.each[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=0)$value
temp.prob.rawens.dphase.each[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=0)$value
temp.prob.rawens.dphase.each[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[4], abs.tol=0)$value
temp.prob.rawens.dphase.each[is.na(temp.prob.rawens.dphase.each)] = 0
prob.rawenssri.dphase.each = rbind(prob.rawenssri.dphase.each, temp.prob.rawens.dphase.each)
# probability of occurrence over threshold from updated ensemble
temp.prob.upens.dphase.over = c()
temp.prob.upens.dphase.over[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 500, abs.tol=0)$value
temp.prob.upens.dphase.over[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[1], abs.tol=0)$value
temp.prob.upens.dphase.over[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[2], abs.tol=0)$value
temp.prob.upens.dphase.over[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[3], abs.tol=0)$value
temp.prob.upens.dphase.over[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[4], abs.tol=0)$value
temp.prob.upens.dphase.over[is.na(temp.prob.upens.dphase.over)] = 0
prob.upenssri.dphase.over = rbind(prob.upenssri.dphase.over, temp.prob.upens.dphase.over)
# probability of occurrence for each phase from updated ensemble
temp.prob.upens.dphase.each = c()
temp.prob.upens.dphase.each[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 100, abs.tol=0)$value
temp.prob.upens.dphase.each[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=0)$value
temp.prob.upens.dphase.each[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=0)$value
temp.prob.upens.dphase.each[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=0)$value
temp.prob.upens.dphase.each[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[4], abs.tol=0)$value
temp.prob.upens.dphase.each[is.na(temp.prob.upens.dphase.each)] = 0
prob.upenssri.dphase.each = rbind(prob.upenssri.dphase.each, temp.prob.upens.dphase.each)
# drought phase from ensemble mean
if(rawens.mean.ts[jj]>sdi.thl[1]) {
rawensmean.sri.dphase[jj,1] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[1]&rawens.mean.ts[jj]>sdi.thl[2]){
rawensmean.sri.dphase[jj,2] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[2]&rawens.mean.ts[jj]>sdi.thl[3]){
rawensmean.sri.dphase[jj,3] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[3]&rawens.mean.ts[jj]>sdi.thl[4]){
rawensmean.sri.dphase[jj,4] = 1
}else{
rawensmean.sri.dphase[jj,5] = 1
}
# drought phase from ensemble mean
if(SRI3.p.ts[jj]>sdi.thl[1]) {
upensmean.sri.dphase[jj,1] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[1]&SRI3.p.ts[jj]>sdi.thl[2]){
upensmean.sri.dphase[jj,2] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[2]&SRI3.p.ts[jj]>sdi.thl[3]){
upensmean.sri.dphase[jj,3] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[3]&SRI3.p.ts[jj]>sdi.thl[4]){
upensmean.sri.dphase[jj,4] = 1
}else{
upensmean.sri.dphase[jj,5] = 1
}
# drought phase from observation
if(temp_sri.ts[jj]>sdi.thl[1]) {
obs.sri.dphase[jj,1] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[1]&temp_sri.ts[jj]>sdi.thl[2]){
obs.sri.dphase[jj,2] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[2]&temp_sri.ts[jj]>sdi.thl[3]){
obs.sri.dphase[jj,3] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[3]&temp_sri.ts[jj]>sdi.thl[4]){
obs.sri.dphase[jj,4] = 1
}else{
obs.sri.dphase[jj,5] = 1
}
}
sdi.thl = c(0, -1, -1.5, -2) # threhold from NOAA and GIDMaPS
thlname = c("No", "D0", "D1", "D2", "D3")
prob.rawenssri.dphase.over = data.frame()
prob.rawenssri.dphase.each = data.frame()
prob.upenssri.dphase.over = data.frame()
prob.upenssri.dphase.each = data.frame()
obs.sri.dphase = as.data.frame(matrix(0, nrow=length(temp_sri.ts), ncol=1+length(sdi.thl)))
rawensmean.sri.dphase = as.data.frame(matrix(0, nrow=length(rawens.mean.ts), ncol=1+length(sdi.thl)))
upensmean.sri.dphase =  as.data.frame(matrix(0, nrow=length(SRI3.p.ts), ncol=1+length(sdi.thl)))
for (jj in c(1:nrow(obs.sri.dphase))){
# probability of occurrence over threshold from raw ensemble
temp.prob.rawens.dphase.over = c()
temp.prob.rawens.dphase.over[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[is.na(temp.prob.rawens.dphase.over)] = 0
prob.rawenssri.dphase.over = rbind(prob.rawenssri.dphase.over, temp.prob.rawens.dphase.over)
# probability of occurrence for each phase from raw ensemble
temp.prob.rawens.dphase.each = c()
temp.prob.rawens.dphase.each[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[is.na(temp.prob.rawens.dphase.each)] = 0
prob.rawenssri.dphase.each = rbind(prob.rawenssri.dphase.each, temp.prob.rawens.dphase.each)
# probability of occurrence over threshold from updated ensemble
temp.prob.upens.dphase.over = c()
temp.prob.upens.dphase.over[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.upens.dphase.over[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[is.na(temp.prob.upens.dphase.over)] = 0
prob.upenssri.dphase.over = rbind(prob.upenssri.dphase.over, temp.prob.upens.dphase.over)
# probability of occurrence for each phase from updated ensemble
temp.prob.upens.dphase.each = c()
temp.prob.upens.dphase.each[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.upens.dphase.each[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[is.na(temp.prob.upens.dphase.each)] = 0
prob.upenssri.dphase.each = rbind(prob.upenssri.dphase.each, temp.prob.upens.dphase.each)
# drought phase from ensemble mean
if(rawens.mean.ts[jj]>sdi.thl[1]) {
rawensmean.sri.dphase[jj,1] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[1]&rawens.mean.ts[jj]>sdi.thl[2]){
rawensmean.sri.dphase[jj,2] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[2]&rawens.mean.ts[jj]>sdi.thl[3]){
rawensmean.sri.dphase[jj,3] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[3]&rawens.mean.ts[jj]>sdi.thl[4]){
rawensmean.sri.dphase[jj,4] = 1
}else{
rawensmean.sri.dphase[jj,5] = 1
}
# drought phase from ensemble mean
if(SRI3.p.ts[jj]>sdi.thl[1]) {
upensmean.sri.dphase[jj,1] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[1]&SRI3.p.ts[jj]>sdi.thl[2]){
upensmean.sri.dphase[jj,2] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[2]&SRI3.p.ts[jj]>sdi.thl[3]){
upensmean.sri.dphase[jj,3] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[3]&SRI3.p.ts[jj]>sdi.thl[4]){
upensmean.sri.dphase[jj,4] = 1
}else{
upensmean.sri.dphase[jj,5] = 1
}
# drought phase from observation
if(temp_sri.ts[jj]>sdi.thl[1]) {
obs.sri.dphase[jj,1] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[1]&temp_sri.ts[jj]>sdi.thl[2]){
obs.sri.dphase[jj,2] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[2]&temp_sri.ts[jj]>sdi.thl[3]){
obs.sri.dphase[jj,3] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[3]&temp_sri.ts[jj]>sdi.thl[4]){
obs.sri.dphase[jj,4] = 1
}else{
obs.sri.dphase[jj,5] = 1
}
}
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts));
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts));
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts));
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts));
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
tail(prob.rawenssri.dphase.over.ts, 12)
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
erridx = which(apply(prob.rawenssri.dphase.each, 1, sum)<0.9999)
rawens.mean.ts[erridx]
rawens.sd.ts[erridx]
sdi.thl = c(0, -1, -1.5, -2) # threhold from NOAA and GIDMaPS
thlname = c("No", "D0", "D1", "D2", "D3")
prob.rawenssri.dphase.over = data.frame()
prob.rawenssri.dphase.each = data.frame()
prob.upenssri.dphase.over = data.frame()
prob.upenssri.dphase.each = data.frame()
obs.sri.dphase = as.data.frame(matrix(0, nrow=length(temp_sri.ts), ncol=1+length(sdi.thl)))
rawensmean.sri.dphase = as.data.frame(matrix(0, nrow=length(rawens.mean.ts), ncol=1+length(sdi.thl)))
upensmean.sri.dphase =  as.data.frame(matrix(0, nrow=length(SRI3.p.ts), ncol=1+length(sdi.thl)))
###integrate(dnorm, mean=-0.5, sd=1, -1.
for (jj in c(1:nrow(obs.sri.dphase))){
# probability of occurrence over threshold from raw ensemble
temp.prob.rawens.dphase.over = c()
temp.prob.rawens.dphase.over[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 1000, abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -1000, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -1000, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -1000, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -1000, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[is.na(temp.prob.rawens.dphase.over)] = 0
prob.rawenssri.dphase.over = rbind(prob.rawenssri.dphase.over, temp.prob.rawens.dphase.over)
# probability of occurrence for each phase from raw ensemble
temp.prob.rawens.dphase.each = c()
temp.prob.rawens.dphase.each[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[is.na(temp.prob.rawens.dphase.each)] = 0
prob.rawenssri.dphase.each = rbind(prob.rawenssri.dphase.each, temp.prob.rawens.dphase.each)
# probability of occurrence over threshold from updated ensemble
temp.prob.upens.dphase.over = c()
temp.prob.upens.dphase.over[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 1000, abs.tol=1e-15)$value
temp.prob.upens.dphase.over[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -1000, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -1000, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -1000, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -1000, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[is.na(temp.prob.upens.dphase.over)] = 0
prob.upenssri.dphase.over = rbind(prob.upenssri.dphase.over, temp.prob.upens.dphase.over)
# probability of occurrence for each phase from updated ensemble
temp.prob.upens.dphase.each = c()
temp.prob.upens.dphase.each[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 500, abs.tol=1e-15)$value
temp.prob.upens.dphase.each[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -500, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[is.na(temp.prob.upens.dphase.each)] = 0
prob.upenssri.dphase.each = rbind(prob.upenssri.dphase.each, temp.prob.upens.dphase.each)
# drought phase from ensemble mean
if(rawens.mean.ts[jj]>sdi.thl[1]) {
rawensmean.sri.dphase[jj,1] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[1]&rawens.mean.ts[jj]>sdi.thl[2]){
rawensmean.sri.dphase[jj,2] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[2]&rawens.mean.ts[jj]>sdi.thl[3]){
rawensmean.sri.dphase[jj,3] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[3]&rawens.mean.ts[jj]>sdi.thl[4]){
rawensmean.sri.dphase[jj,4] = 1
}else{
rawensmean.sri.dphase[jj,5] = 1
}
# drought phase from ensemble mean
if(SRI3.p.ts[jj]>sdi.thl[1]) {
upensmean.sri.dphase[jj,1] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[1]&SRI3.p.ts[jj]>sdi.thl[2]){
upensmean.sri.dphase[jj,2] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[2]&SRI3.p.ts[jj]>sdi.thl[3]){
upensmean.sri.dphase[jj,3] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[3]&SRI3.p.ts[jj]>sdi.thl[4]){
upensmean.sri.dphase[jj,4] = 1
}else{
upensmean.sri.dphase[jj,5] = 1
}
# drought phase from observation
if(temp_sri.ts[jj]>sdi.thl[1]) {
obs.sri.dphase[jj,1] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[1]&temp_sri.ts[jj]>sdi.thl[2]){
obs.sri.dphase[jj,2] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[2]&temp_sri.ts[jj]>sdi.thl[3]){
obs.sri.dphase[jj,3] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[3]&temp_sri.ts[jj]>sdi.thl[4]){
obs.sri.dphase[jj,4] = 1
}else{
obs.sri.dphase[jj,5] = 1
}
}
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts));
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts));
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts));
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts));
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
tail(prob.rawenssri.dphase.over.ts, 12)
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
thlname = c("No", "D0", "D1", "D2", "D3")
prob.rawenssri.dphase.over = data.frame()
prob.rawenssri.dphase.each = data.frame()
prob.upenssri.dphase.over = data.frame()
prob.upenssri.dphase.each = data.frame()
obs.sri.dphase = as.data.frame(matrix(0, nrow=length(temp_sri.ts), ncol=1+length(sdi.thl)))
rawensmean.sri.dphase = as.data.frame(matrix(0, nrow=length(rawens.mean.ts), ncol=1+length(sdi.thl)))
upensmean.sri.dphase =  as.data.frame(matrix(0, nrow=length(SRI3.p.ts), ncol=1+length(sdi.thl)))
###integrate(dnorm, mean=-0.5, sd=1, -1.5, -1)$value
for (jj in c(1:nrow(obs.sri.dphase))){
# probability of occurrence over threshold from raw ensemble
temp.prob.rawens.dphase.over = c()
temp.prob.rawens.dphase.over[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 100, abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -100, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -100, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -100, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -100, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[is.na(temp.prob.rawens.dphase.over)] = 0
prob.rawenssri.dphase.over = rbind(prob.rawenssri.dphase.over, temp.prob.rawens.dphase.over)
# probability of occurrence for each phase from raw ensemble
temp.prob.rawens.dphase.each = c()
temp.prob.rawens.dphase.each[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 100, abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -100, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[is.na(temp.prob.rawens.dphase.each)] = 0
prob.rawenssri.dphase.each = rbind(prob.rawenssri.dphase.each, temp.prob.rawens.dphase.each)
# probability of occurrence over threshold from updated ensemble
temp.prob.upens.dphase.over = c()
temp.prob.upens.dphase.over[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 100, abs.tol=1e-15)$value
temp.prob.upens.dphase.over[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[is.na(temp.prob.upens.dphase.over)] = 0
prob.upenssri.dphase.over = rbind(prob.upenssri.dphase.over, temp.prob.upens.dphase.over)
# probability of occurrence for each phase from updated ensemble
temp.prob.upens.dphase.each = c()
temp.prob.upens.dphase.each[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 100, abs.tol=1e-15)$value
temp.prob.upens.dphase.each[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -100, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[is.na(temp.prob.upens.dphase.each)] = 0
prob.upenssri.dphase.each = rbind(prob.upenssri.dphase.each, temp.prob.upens.dphase.each)
# drought phase from ensemble mean
if(rawens.mean.ts[jj]>sdi.thl[1]) {
rawensmean.sri.dphase[jj,1] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[1]&rawens.mean.ts[jj]>sdi.thl[2]){
rawensmean.sri.dphase[jj,2] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[2]&rawens.mean.ts[jj]>sdi.thl[3]){
rawensmean.sri.dphase[jj,3] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[3]&rawens.mean.ts[jj]>sdi.thl[4]){
rawensmean.sri.dphase[jj,4] = 1
}else{
rawensmean.sri.dphase[jj,5] = 1
}
# drought phase from ensemble mean
if(SRI3.p.ts[jj]>sdi.thl[1]) {
upensmean.sri.dphase[jj,1] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[1]&SRI3.p.ts[jj]>sdi.thl[2]){
upensmean.sri.dphase[jj,2] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[2]&SRI3.p.ts[jj]>sdi.thl[3]){
upensmean.sri.dphase[jj,3] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[3]&SRI3.p.ts[jj]>sdi.thl[4]){
upensmean.sri.dphase[jj,4] = 1
}else{
upensmean.sri.dphase[jj,5] = 1
}
# drought phase from observation
if(temp_sri.ts[jj]>sdi.thl[1]) {
obs.sri.dphase[jj,1] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[1]&temp_sri.ts[jj]>sdi.thl[2]){
obs.sri.dphase[jj,2] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[2]&temp_sri.ts[jj]>sdi.thl[3]){
obs.sri.dphase[jj,3] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[3]&temp_sri.ts[jj]>sdi.thl[4]){
obs.sri.dphase[jj,4] = 1
}else{
obs.sri.dphase[jj,5] = 1
}
}
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts));
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts));
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts));
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts));
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
tail(prob.rawenssri.dphase.over.ts, 12)
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
erridx = which(apply(prob.rawenssri.dphase.each, 1, sum)<0.9999)
rawens.mean.ts[erridx]
rawens.sd.ts[erridx]
rawens.sd.ts = temp_enssri.stat.df$YEAR %in% union(bcalibyear, bvalidyear) %>% temp_enssri.stat.df$SD[.]
sdi.thl = c(0, -1, -1.5, -2) # threhold from NOAA and GIDMaPS
thlname = c("No", "D0", "D1", "D2", "D3")
prob.rawenssri.dphase.over = data.frame()
prob.rawenssri.dphase.each = data.frame()
prob.upenssri.dphase.over = data.frame()
prob.upenssri.dphase.each = data.frame()
obs.sri.dphase = as.data.frame(matrix(0, nrow=length(temp_sri.ts), ncol=1+length(sdi.thl)))
rawensmean.sri.dphase = as.data.frame(matrix(0, nrow=length(rawens.mean.ts), ncol=1+length(sdi.thl)))
upensmean.sri.dphase =  as.data.frame(matrix(0, nrow=length(SRI3.p.ts), ncol=1+length(sdi.thl)))
###integrate(dnorm, mean=-0.5, sd=1, -1.5, -1)$value
for (jj in c(1:nrow(obs.sri.dphase))){
# probability of occurrence over threshold from raw ensemble
temp.prob.rawens.dphase.over = c()
temp.prob.rawens.dphase.over[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 10, abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -10, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -10, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -10, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -10, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.over[is.na(temp.prob.rawens.dphase.over)] = 0
prob.rawenssri.dphase.over = rbind(prob.rawenssri.dphase.over, temp.prob.rawens.dphase.over)
# probability of occurrence for each phase from raw ensemble
temp.prob.rawens.dphase.each = c()
temp.prob.rawens.dphase.each[1] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[1], 10, abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[2] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[3] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[4] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[5] = integrate(dnorm, mean=rawens.mean.ts[jj], sd=rawens.sd.ts[jj], -10, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.rawens.dphase.each[is.na(temp.prob.rawens.dphase.each)] = 0
prob.rawenssri.dphase.each = rbind(prob.rawenssri.dphase.each, temp.prob.rawens.dphase.each)
# probability of occurrence over threshold from updated ensemble
temp.prob.upens.dphase.over = c()
temp.prob.upens.dphase.over[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 10, abs.tol=1e-15)$value
temp.prob.upens.dphase.over[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -10, sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -10, sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -10, sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -10, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.over[is.na(temp.prob.upens.dphase.over)] = 0
prob.upenssri.dphase.over = rbind(prob.upenssri.dphase.over, temp.prob.upens.dphase.over)
# probability of occurrence for each phase from updated ensemble
temp.prob.upens.dphase.each = c()
temp.prob.upens.dphase.each[1] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[1], 10, abs.tol=1e-15)$value
temp.prob.upens.dphase.each[2] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[2], sdi.thl[1], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[3] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[3], sdi.thl[2], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[4] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], sdi.thl[4], sdi.thl[3], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[5] = integrate(dnorm, mean=SRI3.p.ts[jj], sd=sd.SRI3.p.ts[jj], -10, sdi.thl[4], abs.tol=1e-15)$value
temp.prob.upens.dphase.each[is.na(temp.prob.upens.dphase.each)] = 0
prob.upenssri.dphase.each = rbind(prob.upenssri.dphase.each, temp.prob.upens.dphase.each)
# drought phase from ensemble mean
if(rawens.mean.ts[jj]>sdi.thl[1]) {
rawensmean.sri.dphase[jj,1] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[1]&rawens.mean.ts[jj]>sdi.thl[2]){
rawensmean.sri.dphase[jj,2] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[2]&rawens.mean.ts[jj]>sdi.thl[3]){
rawensmean.sri.dphase[jj,3] = 1
}else if(rawens.mean.ts[jj]<=sdi.thl[3]&rawens.mean.ts[jj]>sdi.thl[4]){
rawensmean.sri.dphase[jj,4] = 1
}else{
rawensmean.sri.dphase[jj,5] = 1
}
# drought phase from ensemble mean
if(SRI3.p.ts[jj]>sdi.thl[1]) {
upensmean.sri.dphase[jj,1] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[1]&SRI3.p.ts[jj]>sdi.thl[2]){
upensmean.sri.dphase[jj,2] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[2]&SRI3.p.ts[jj]>sdi.thl[3]){
upensmean.sri.dphase[jj,3] = 1
}else if(SRI3.p.ts[jj]<=sdi.thl[3]&SRI3.p.ts[jj]>sdi.thl[4]){
upensmean.sri.dphase[jj,4] = 1
}else{
upensmean.sri.dphase[jj,5] = 1
}
# drought phase from observation
if(temp_sri.ts[jj]>sdi.thl[1]) {
obs.sri.dphase[jj,1] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[1]&temp_sri.ts[jj]>sdi.thl[2]){
obs.sri.dphase[jj,2] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[2]&temp_sri.ts[jj]>sdi.thl[3]){
obs.sri.dphase[jj,3] = 1
}else if(temp_sri.ts[jj]<=sdi.thl[3]&temp_sri.ts[jj]>sdi.thl[4]){
obs.sri.dphase[jj,4] = 1
}else{
obs.sri.dphase[jj,5] = 1
}
}
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts));
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts));
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts));
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts));
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
tail(prob.rawenssri.dphase.over.ts, 12)
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
erridx = which(apply(prob.rawenssri.dphase.each, 1, sum)<0.9999)
rawens.mean.ts[erridx]
rawens.sd.ts[erridx]
write.csv(prob.rawenssri.dphase.over, file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
write.csv(prob.rawenssri.dphase.each, file.path("../predictResult", "probforecast_rawEDP_multi.csv"))
write.csv(prob.rawenssri.dphase.over.ts, file.path("../predictResult", "probforecast_rawEDP_binary.csv"), row.names=F)
write.csv(prob.rawenssri.dphase.each.ts, file.path("../predictResult", "probforecast_rawEDP_multi.csv"), row.names=F)
write.csv(prob.rawenssri.dphase.over.ts, file.path("../predictResult", "probforecast_rawEDP_binary.csv"), row.names=T)
write.csv(prob.rawenssri.dphase.each.ts, file.path("../predictResult", "probforecast_rawEDP_multi.csv"), row.names=T)
prob.rawenssri.dphase.each.ts
write.csv(prob.rawenssri.dphase.over.ts, file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
prob.rawenssri.dphase.over.ts %>% write.csv(data.frame(date(.), as.matrix(.)), file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
prob.rawenssri.dphase.over.ts %>% write.csv(., file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
prob.rawenssri.dphase.over.ts %>% round(., digit=5)
prob.rawenssri.dphase.over.ts %>% round(., digit=3)
colnames(prob.rawenssri.dphase.over) = thlname; prob.rawenssri.dphase.over.ts = xts(prob.rawenssri.dphase.over, date(temp_sri.ts)) %>% round(., digit=5);
colnames(prob.rawenssri.dphase.each) = thlname; prob.rawenssri.dphase.each.ts = xts(prob.rawenssri.dphase.each, date(temp_sri.ts)) %>% round(., digit=5);
colnames(prob.upenssri.dphase.over) = thlname; prob.upenssri.dphase.over.ts = xts(prob.upenssri.dphase.over, date(temp_sri.ts)) %>% round(., digit=5);
colnames(prob.upenssri.dphase.each) = thlname; prob.upenssri.dphase.each.ts = xts(prob.upenssri.dphase.each, date(temp_sri.ts)) %>% round(., digit=5);
colnames(obs.sri.dphase) = thlname; obs.sri.dphase.ts = xts(obs.sri.dphase, date(temp_sri.ts));
colnames(rawensmean.sri.dphase) = thlname; rawensmean.sri.dphase.ts = xts(rawensmean.sri.dphase, date(temp_sri.ts));
colnames(upensmean.sri.dphase) = thlname; upensmean.sri.dphase.ts = xts(upensmean.sri.dphase, date(temp_sri.ts));
tail(prob.rawenssri.dphase.over.ts, 12)
apply(prob.rawenssri.dphase.each, 1, sum)
apply(prob.upenssri.dphase.each, 1, sum)
erridx = which(apply(prob.rawenssri.dphase.each, 1, sum)<0.9999)
rawens.mean.ts[erridx]
rawens.sd.ts[erridx]
prob.rawenssri.dphase.over.ts %>% write.csv(., file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
prob.rawenssri.dphase.over.ts %>% write.csv(., file.path("../predictResult", "probforecast_rawEDP_binary.csv"))
prob.rawenssri.dphase.each.ts %>% write.csv(., file.path("../predictResult", "probforecast_rawEDP_multi.csv"))
prob.rawenssri.dphase.each.ts %>% write.csv(., file.path("../predictResult", "probforecast_upEDP_binary.csv"))
prob.rawenssri.dphase.over.ts %>% write.csv(., file.path("../predictResult", "probforecast_upEDP_binary.csv"))
prob.rawenssri.dphase.each.ts %>% write.csv(., file.path("../predictResult", "probforecast_upEDP_multi.csv"))
rawensmean.sri.dphase.ts %>% write.csv(., file.path("../predictResult", "detforecast_rawEDP.csv"))
upensmean.sri.dphase.ts %>% write.csv(., file.path("../predictResult", "detforecast_upEDP.csv"))
obs.sri.dphase.ts %>% write.csv(., file.path("../predictResult", "obs_sri3.csv"))
date(obs.sri.dphase.ts) %>% write.csv(., file.path("../predictResult", "date.csv"))
